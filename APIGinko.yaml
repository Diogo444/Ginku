swagger: "2.0"
info:
  description: "

     Ce site s'adresse à des développeurs en informatique. 
      <p> &#9888; Une <code>clé d'API</code> est maintenant obligatoire pour chaque requête effectuée sur l'API. L'utilisation de l'API demeure gratuite. 
       La clé nous permet d'obtenir des statistiques d'utilisation et de mettre en place une gestion de droits 
       pour accéder à des informations complémentaires comme l'affluence. Demandez dès maintenant 
       votre clé en nous contactant à l'adresse ginko.support-ssi@keolis.com</p>  
      <br/>

   
   <blockquote>
   <hr>
    <h2>Changelog</h2>
    <ul>
      <li><strong>Version 1.2 (2023)</strong>
        <ul>
          <li>Ajout de nouvelles notions pour manipuler l'affichage des temps d'attente (cf FormTempsAttente)</li>          
          <li>Ajout de la notion typologie de ligne (cf. FormLigne)</li>
          <li>Ajout de la notion état d'une ligne (cf. FormInfoLigne et /TR/getEtatLigne)</li>
          <li>/TR/getInfosTrafic.do et FormInfoTrafic devienent <code>deprecated</code> et sont remplacés par  /TR/getMessages.do et FormMessage</li>
        </ul>
      </li>
      <li><strong>Version 1.1 (2022-06)</strong>
        <ul>
          <li>Ajout de la notion d'affluence</li>
          <li>Clé API est obligatoire</li>
          <li>Ajout de la génération de <a href='https://api.ginko.voyage/#CleTemporaire'>clé temporaire</a> pour les tests</li>
        </ul>
      </li>
      <li><strong>Version 1.0.0 (2019)</strong>
        <ul>
          <li>Version initiale de l'API</li>
        </ul>
      </li>
    </ul>
    <hr>
  </blockquote>
     

    <br>
    <br>
     <p>L'API bas niveau permet d'interragir avec le serveur Ginko depuis n'importe quel langage; vous devez
            construire et exécuter les requêtes HTTP, et analyser les résultats. Si vous développez en Javascript, <a
                    href='https://api.ginko.voyage/#apijs'>utilisez plutôt l'API Javascript</a>.</p>
        <h1>Requête</h1>
        <p>L'URL à appeler est: https://api.ginko.voyage/chemin_de_la_methode.do?paramètres</p>
        <p><strong>Remarque importante:</strong> L'API est accessible uniquement en HTTPS.</p>
        <p>Nous vous recommandons d'utiliser la méthode POST si vous le pouvez, afin de fournir les paramètres dans le
            corps de la requête plutôt que dans l'URL.</p>
        <p><strong>Encodage des paramètres:</strong> les paramètres des requêtes doivent être encodés en UTF-8. Les
            réponses de l'API sont également encodées en UTF-8.</p>
        <p><strong>Clé API:</strong> si vous disposez d'une clé API, celle-ci doit être fournie à chaque requête, en
            plus des paramètres éventuels de la requête (voir exemple ci-dessous). La clé API deviendra prochainement
            obligatoire.</p>
        <h3>Exemples</h3>
        <ul>
            <li><a href='https://api.ginko.voyage/DR/getLignes.do?apiKey=XXX' target='_blank'>https://api.ginko.voyage/DR/getLignes.do?apiKey=XXX</a>
            </li>
            <li><a href='https://api.ginko.voyage/DR/getDetailsVariante.do?apiKey=XXX&idLigne=101&idVariante=15-0'
                   target='_blank'>https://api.ginko.voyage/DR/getDetailsVariante.do?apiKey=XXX&amp;idLigne=101&amp;idVariante=15-0</a>
            </li>
        </ul>
        <h1>Réponse</h1>
        <p>La réponse est au format JSON.</p>
        <p>En cas de succès de la requête, le résultat est toujours encapsulé de la façon suivante:</p>
        <pre><code>{
  'ok': true,
  'objets': résultat décapsulé, tel qu'il est décrit dans la documentation de la méthode
}</code></pre>
        <p>En cas d'échec de la requête, le résultat est toujours encapsulé de la façon suivante:</p>
        <pre><code>{
  'ok': false,
  'msg': message d'erreur
}</code></pre>
        <p>Attention, en cas d'indisponibilité du service ou d'un plantage non prévu, vous pouvez recevoir également une
            erreur de niveau HTTP (type erreur 5XX par exemple).</p>
            
            <br/>
            
          <hr>
        <h2>Cas particuliers</h2>
        <ul>
            <li>Paramètres booléens: lorsqu'une méthode demande un paramètre de type booléen, spécifiez 1 pour vrai et 0
                pour faux.
            </li>
            <li>Paramètres tableaux: lorsqu'une méthode demande un paramètre de type tableau, fournissez-le sous forme
                de chaine en séparant les valeurs par le caractère tilde ~ (0x7E). Par exemple, si l'API Javascript
                reçoit le paramètre param1:['salut','hello'], fournissez param1=salut~hello avec l'API bas niveau.
            </li>
        </ul>
        <hr>
        <br/>
        <br/>
                 "
  version: "1.2"

  title: "Open data du réseau Ginko"
  termsOfService: "https://api.ginko.voyage/"
  contact:
    email: "ginko.support-ssi@keolis.com"
  license:
    name: "Licence ODbL (Open Database Licence)"
    url: "https://opendatacommons.org/licenses/odbl/1-0/"
  x-changelog:
    - version: 1.0.1
      description: Correction d'un bug
    - version: 1.0.0
      description: Version initiale de l'API
host: "api.ginko.voyage"
basePath: "/"
tags:
  - name: "Tarifs"
    description: "Récupérer la liste des titres de transport Ginko"
  - name: "DR"
    description: "Données référentielles du réseau Ginko : lignes, arrets, etc..."
  - name: "TR"
    description: "Données temps réel du réseau Ginko : temps d'attente à un arrêt, info trafic, etc..."
  - name: "Nouveautés v1.2"
    description: ""
paths:
  /Tarifs/get.do:
    get:
      tags:
        - "Tarifs"
      summary: "Récupérer la liste des titres de transport Ginko"
      description: "Retourne la liste des titres au voyage et des abonnements. 
             Ces informations sont mises à jour à chaque modification de la gamme tarifaire. 
             Tarifs actuels valables depuis le 1er juillet 2019."
      produces:
        - application/json
      parameters:
        - name: "apiKey"
          in: "query"
          description: "numéro de la clé api"
          required: true
          type: "string"
      responses:
        200:
          description: Tableau d'objets FormTarif
          schema:
            type: array
            items:
              $ref: '#/definitions/FormTarif'


  /DR/getLignes.do:
    get:
      tags:
        - "DR"
      summary: "Retourne la liste des lignes et variantes de lignes (sens) qui circulent aujourd'hui."
      description: "Dans une application serveur, nous vous conseillons d'appeler cette méthode une fois par jour (à 4h du matin) et de mémoriser les résultats pour le reste de la journée. Dans une application client (application smartphone par exemple), nous vous conseillons d'appeler cette méthode au lancement de l'application."
      operationId: "getLignes.do"
      produces:
        - "application/json"
      parameters:
        - name: "apiKey"
          in: "query"
          description: "numéro de la clé api"
          required: true
          type: "string"
      responses:
        "200":
          description: "Tableau d'objets FormLigne
Liste des lignes Ginko, dans l'ordre logique où elles doivent être affichées à l'utilisateur."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FormLigne"

  /DR/getDetailsVariante.do:
    get:
      tags:
        - "DR"
      description: Retourne la liste des arrêts qui composent une variante de ligne.
      produces:
        - "application/json"
      parameters:
        - name: "apiKey"
          in: "query"
          description: "numéro de la clé api"
          required: true
          type: "string"
        - name: "idLigne"
          in: query
          required: true
          description: "identifiant de la ligne (issu de l'objet FormLigne)"
          type: string
        - name: "idVariante"
          in: "query"
          required: true
          description: "identifiant de la variante dans la ligne (issu de l'objet FormVariante)"
          type: string
      responses:
        '200':
          description: "Liste des arrêts desservis par cette variante de ligne, dans l'ordre géographique (le premier arrêt est le terminus de départ, le dernier arrêt le terminus d'arrivée)."
          schema:
            type: array
            items:
              $ref: '#/definitions/FormArret'

  '/DR/getArrets.do':
    get:
      tags:
        - "DR"
      summary: Récupère la liste des arrêts de bus et tram
      description: "Retourne la liste des arrêts de bus et des stations tramway. La liste est triée par ordre alphabétique.

Attention, plusieurs arrêts peuvent avoir le même nom (typiquement, deux arrêts de bus l'un en face de l'autre); si vous prévoyez d'afficher cette liste à l'utilisateur, il est sans doute nécessaire de dédupliquer les arrêts au préalable (opération simple, car les arrêts de même nom se suivent dans la liste).

Cette liste évolue très rarement, vous pouvez la mettre en cache pendant plusieurs jours. Il se peut que d'anciens arrêts sont encore présents dans cette liste."
      parameters:
        - name: "apiKey"
          in: "query"
          description: "numéro de la clé api"
          required: true
          type: "string"
      responses:
        '200':
          description: "Tableau d'objets FormArret
Liste des arrêts de bus urbains, de tramways et d'autocars périurbains, dans l'ordre alphabétique."
          schema:
            type: array
            items:
              $ref: '#/definitions/FormArret'

  '/DR/getVariantesDesservantArret.do':
    get:
      tags:
        - "DR"
      summary: Récupère la liste des lignes et sens qui desservent un arrêt
      parameters:
        - name: "apiKey"
          in: "query"
          description: "numéro de la clé api"
          required: true
          type: "string"
        - name: idArret
          in: query
          description: Identifiant de l'arrêt
          required: true
          type: string
      responses:
        '200':
          description: "Tableau d'objets FormLigne
Liste des lignes desservant cet arrêt; le champ 'variantes' de l'objet FormLigne ne contient que les variantes (sens de circulation) desservant l'arrêt demandé."
          schema:
            type: array
            items:
              $ref: '#/definitions/FormLigne'

  '/DR/getArretsProches.do':
    get:
      tags:
        - "DR"
      summary: "Retourne la liste des arrêts de bus et tram situés à proximité de la position fournie"
      description: "Retourne la liste des arrêts Ginko situés à proximité de la position fournie. Les arrêts sont triés du plus proche au plus lointain. Les arrêts situés à plus de 500 mètres à vol d'oiseau ne sont pas retournés.

Attention, plusieurs arrêts peuvent avoir le même nom (typiquement, deux arrêts de bus l'un en face de l'autre); cette méthode n'est pas conçue pour afficher une liste d'arrêts à l'utilisateur, mais plutôt pour montrer les arrêts à proximité sur une carte. Si vous prévoyez malgré tout d'afficher cette liste à l'utilisateur, il est sans doute nécessaire de dédupliquer les arrêts au préalable.

Attention, si vous obtenez la position de l'utilisateur à partir du GPS de son téléphone, assurez-vous de la précision de la position."
      parameters:
        - name: "apiKey"
          in: "query"
          description: "numéro de la clé api"
          required: true
          type: "string"
        - name: latitude
          in: query
          description: "Coordonnée GPS par rapport à l'équateur, en degrés décimaux. Exemple: 47.236288"
          required: true
          type: number
          format: float
        - name: longitude
          in: query
          description: "Coordonnée GPS par rapport au méridien de Greenwich, en degrés décimaux. Exemple: 6.022884"
          required: true
          type: number
          format: float
      responses:
        200:
          description: "Tableau d'objets FormArret
Liste des arrêts de bus urbains, de tramways et d'autocars périurbains situés à moins de 500 mètres, du plus proche au plus lointain."
          schema:
            type: array
            items:
              $ref: '#/definitions/FormArret'

  /DR/getDetailsArret.do:
    get:
      tags:
        - "DR"
      summary: "Retourne les détails d'un arrêt à partir de son identifiant"
      description: "Retourne les détails d'un arrêt à partir de son identifiant. Les méthodes DR/getArrets et DR/getArretsProches décrites ci-dessus fournissent déjà les informations détaillées; en revanche, certaines méthodes TR (Temps Réel) indiquent uniquement l'identifiant de l'arrêt. Cette méthode peut vous permettre d'obtenir ponctuellement les détails de l'arrêt sans avoir à charger la liste complète."
      parameters:
        - name: "apiKey"
          in: "query"
          description: "numéro de la clé api"
          required: true
          type: "string"
        - name: id
          in: query
          description: Identifiant de l'arrêt
          required: true
          type: string
      responses:
        200:
          description: "Objet FormArret contenant toutes les informations de l'arrêt"
          schema:
            $ref: '#/definitions/FormArret'


  /DR/getDetailsVehicule.do:
    get:
      tags:
        - "DR"
      summary: Récupérer les détails d'un véhicule
      description: "Retourne les détails d'un véhicule à partir de son numéro. Les méthodes TR (Temps Réel) indiquent uniquement le numéro du véhicule, et cette méthode permet d'obtenir des informations sur les équipements présents dans le véhicule.

Les informations concernant un véhicule évoluent rarement; vous pouvez mettre en cache les résultats de cette requête (pour un véhicule) pendant 24h.

Cette méthode ne fonctionne que pour les véhicules urbains (bus et tramways); les méthodes TR ne fournissent pas le numéro des autocars périurbains."
      parameters:
        - name: "apiKey"
          in: "query"
          description: "numéro de la clé api"
          required: true
          type: "string"
        - name: num
          in: query
          required: true
          type: integer
      responses:
        200:
          description: Objet FormVehicule contenant toutes les informations du véhicule
          schema:
            $ref: '#/definitions/FormVehicule'

  '/TR/getTempsLieu.do':
    get:
      tags:
        - TR
      summary: Récupère les temps d'attente pour un lieu ou un arrêt
      description: "Un lieu est un ensemble d'arrêts portant le même nom. Par exemple, le lieu 'Ile de France' regroupe les deux arrêts de la ligne 13 et les deux stations tram. Cette notion permet d'afficher à l'utilisateur les temps d'attente de toutes les lignes/sens qui passent à un endroit donné, même s'il ne s'agit pas physiquement du même arrêt (par exemple, deux arrêts situés de part et d'autre de la route). A contrario, un arrêt est un point physique unique, desservi par une ou plusieurs lignes, dans un seul sens de circulation; en général, un arrêt correspond à un abribus ou poteau sur le terrain. Les temps d'attente des bus sont recalculés toutes les 30 secondes, et ceux des tram toutes les 10. Il est donc recommandé de renouveller cette requête toutes les 10 secondes afin d'actualiser l'affichage."
      parameters:
        - name: "apiKey"
          in: "query"
          description: "numéro de la clé api"
          required: true
          type: "string"
        - name: nom
          in: query
          required: false
          description: "lieu recherché (nom d'arrêt). Exemple: Ile de france. L'API recherche les arrêts dont le nom ressemble à celui indiqué (par exemple 'Ile-de-France' ou 'ile france' fonctionneront); vous pouvez donc fournir ici directement la saisie de l'utilisateur, sans traitement préalable."
          type: string
        - name: idArret
          in: query
          required: false
          description: "identifiant de l'arrêt recherché, si vous le connaissez. Exemple: t_idf1. En effectuant la recherche par identifiant d'arrêt, l'API renverra uniquement les temps d'attente de cet arrêt, pas ceux des autres arrêts éventuels portant le même nom. Vous devez renseigner le paramètre 'nom' ou le paramètre 'idArret', mais pas les deux."
          type: string
        - name: nb
          in: query
          required: false
          description: "nombre de temps d'attente souhaités pour chaque ligne/sens. Doit être compris entre 1 et 5. Attention, le résultat peut contenir moins de temps d'attente que souhaité, par exemple en fin de journée. Optionnel (2 par défaut)."
          type: integer
      responses:
        200:
          description: "Objet contenant les champs suivants: nomExact, listeTemps, latitude, longitude"
          schema:
            type: object
            properties:
              nomExact:
                type: string
                description: nom précis (corrigé par rapport au nom fourni en paramètre)
              listeTemps:
                type: array
                description: "tableau d'objets FormTempsAttente. Liste des prochains passages à ce lieu, triés par ligne/sens puis par temps d'attente croissant."
                items:
                  $ref: '#/definitions/FormTempsAttente'
              latitude:
                description: "(Ajouté le 01/06/2017) Latitude approximative (en degrés décimaux). Il s'agit de la position moyenne des arrêts physiques, elle ne doit pas être affichée sur une carte du fait de son imprécision, mais plutôt être utilisée pour des calculs de distance par rapport à la zone. Si cette valeur vaut 0, c'est que les coordonnées GPS de la zone sont inconnues (très rare)."
                type: number
                format: float
                x-since: 01/06/2017
              longitude:
                description: "(Ajouté le 01/06/2017) Longitude approximative (en degrés décimaux). Mêmes remarques que pour la latitude."
                type: number
                format: float


  /TR/getListeTemps.do:
    get:
      tags:
        - TR
      summary: Récupérer un ensemble de temps d'attente
      description: "Cette méthode permet de récupérer les temps d'attente à un ou plusieurs lieux, pour une ou plusieurs lignes.

Les temps d'attente des bus sont recalculés toutes les 30 secondes, et ceux des tram toutes les 10. Il est donc recommandé de renouveller cette requête toutes les 10 secondes afin d'actualiser l'affichage.

Les trois paramètres 'listeXXX' fonctionnent en parallèle; elles doivent contenir le même nombre de valeurs. Regardez les exemples et faites des essais pour bien comprendre le fonctionnement."
      parameters:
        - name: "apiKey"
          in: "query"
          description: "numéro de la clé api"
          required: true
          type: "string"
        - name: listeNoms
          in: query
          required: true
          type: array
          collectionFormat: pipes
          items:
            type: string

          description: "tableau de chaines, indiquant les lieux recherchés (nom d'arrêt; la notion de lieu est expliquée à la méthode précédente). Exemple: ['Ile de France', 'Poste']."
        - name: listeIdLignes
          in: query
          required: true
          type: array
          items:
            type: string
          description: "tableau de chaines, indiquant les identifiants des lignes recherchées (attention, il ne s'agit pas du numéro public, voir doc de l'objet FormLigne). Exemple: ['101', '4']."
        - name: listeSensAller
          in: query
          required: true
          type: array
          items:
            type: boolean
          description: "tableau de booléens, indiquant si l'on souhaite le sens aller (true) ou retour (false) des lignes. Exemple: [true, false]."
        - name: preserverOrdre
          in: query
          type: boolean
          description: "booléen indiquant si l'ordre des demandes (paramètres listesXXX) doit être respecté dans la réponse du serveur, ou non. Si le paramètre est fourni et de valeur true, alors les temps d'attente seront retournés dans l'ordre où ils sont demandés; sinon, ils sont retournés par ordre alphabétique du nom d'arrêt, puis numéro de ligne public, puis sens (aller puis retour). A moins que vous ne réalisiez une IHM permettant à l'utilisateur d'ordonner les temps comme il le souhaite, nous vous conseillons de ne pas fournir ce paramètre."
        - name: nb
          in: query
          type: integer
          minimum: 1
          maximum: 5
          description: "nombre de temps d'attente souhaités pour chaque arrêt/ligne/sens. Doit être compris entre 1 et 5. Attention, le résultat peut contenir moins de temps d'attente que souhaité, par exemple en fin de journée. Optionnel (2 par défaut)."
      responses:
        200:
          description: "Tableau de tableau de temps d'attente par lieu"
          schema:
            type: array
            items:
              type: object
              properties:
                nomExact:
                  type: string
                  description: nom précis (corrigé par rapport au nom fourni en paramètre)
                listeTemps:
                  type: array
                  description: "tableau d'objets FormTempsAttente. Liste des prochains passages à ce lieu (uniquement ceux demandés), triés par arrêt/ligne/sens (si preserverOrdre est false ou non fourni) puis par temps d'attente croissant. (Notez que si vous spécifiez le paramètre preserverOrdre, le même lieu peut apparaître plusieurs fois dans la réponse, si deux demandes concernant le même arrêt ne sont pas 'côte à côte' dans la requête.)"
                  items:
                    $ref: '#/definitions/FormTempsAttente'
                latitude:
                  description: "(Ajouté le 01/06/2017) Latitude approximative (en degrés décimaux). Il s'agit de la position moyenne des arrêts physiques, elle ne doit pas être affichée sur une carte du fait de son imprécision, mais plutôt être utilisée pour des calculs de distance par rapport à la zone. Si cette valeur vaut 0, c'est que les coordonnées GPS de la zone sont inconnues (très rare)."
                  type: number
                  format: float
                longitude:
                  description: "(Ajouté le 01/06/2017) Longitude approximative (en degrés décimaux). Mêmes remarques que pour la latitude."
                  type: number
                  format: float


  /TR/getInfosTrafic.do:
    get:
      deprecated: true
      tags:
        - TR
      summary: Récupérer les infos-trafic - V1.2 Remplacer par /TR/getMessages.do
      description: "Cette méthode permet de récupérer les infos-trafic concernant le réseau urbain Ginko (perturbations, travaux, incidents...). Ces informations ne changent pas souvent en général; toutefois, elle peuvent changer à tout moment, et ne doivent donc pas être mises en cache plus d'une minute. Les infos-trafic sont séparées en deux catégories: les informations anticipées, d'une part, correspondent à des événements prévisibles (déviation dûe à des travaux par exemple). Généralement, les informations anticipées sont disponibles un ou plusieurs jours avant la perturbation. Les informations temps réel, d'autre part, correspondent à des événements imprévisibles (intempéries, accident, incident technique, etc)."
      operationId: getInfosTrafic
      parameters:
        - name: "apiKey"
          in: "query"
          description: "numéro de la clé api"
          required: true
          type: "string"
      responses:
        200:
          description: "Objet contenant deux tableaux: infosAnticipees (liste des infos-trafic anticipées, objets FormInfoTrafic), triées dans l'ordre logique d'affichage. Eventuellement un tableau vide []. infosTempsReel (liste des infos-trafic temps réel, objets FormInfoTrafic), triées dans l'ordre logique d'affichage. Eventuellement un tableau vide []."
          schema:
            type: object
            properties:
              infosAnticipees:
                type: array
                items:
                  $ref: '#/definitions/FormInfoTrafic'
              infosTempsReel:
                type: array
                items:
                  $ref: '#/definitions/FormInfoTrafic'

  /TR/getEtatLignes.do:
    get:
      tags:
        - TR
        - "Nouveautés v1.2"
      summary: Retourne une liste de ligne avec leur état en terme d'infotrafic
      description: "<code>Nouveauté v1.2</code>Cette méthode permet de récupérer l'état de chaque ligne du réseau Ginko. 
                      exemple 'La ligne fonctionne normalement' ou 'Il y a une information concernant la ligne' 
                      ou 'La circulation de la ligne est interrompue'"
      operationId: getEtatLignes
      parameters:
        - name: "apiKey"
          in: "query"
          description: "numéro de la clé api"
          required: true
          type: "string"
      responses:
        200:
          description: "Tableaux de FormInfoLigne trié dans l'ordre
                           dans le quel elles doivent être affichées"
          schema:
            type: array
            items:
              $ref: '#/definitions/FormInfoLigne'

  /TR/getMessages.do:
    get:
      tags:
        - TR
        - "Nouveautés v1.2"
      summary: Récupérer les infos-trafic du réseau Ginko
      description: "Cette méthode permet de récupérer les infos-trafic concernant le réseau urbain et périurbain Ginko (perturbations, travaux, incidents...). Ces informations ne changent pas souvent en général; toutefois, elle peuvent changer à tout moment, et ne doivent donc pas être mises en cache plus d'une minute."
      operationId: getMessages
      parameters:
        - name: "apiKey"
          in: "query"
          description: "numéro de la clé api"
          required: true
          type: "string"
        - name: "idLignes"
          in: "query"
          description: "optionnel : pour filtrer les messages par ligne, il s'agit d'un tableau d'identifiants de ligne (cf. FormLigne)"
          type: array
          items:
            type: "string"
        - name: "idArrets"
          in: "query"
          description: "optionnel : pour filtrer les messages par arrêt, il s'agit d'un tableau d'identifiants d'arrêt (cf. FormArret)"
          type: array
          items:
            type: "string"

      responses:
        200:
          description: "Tableaux de FormMessage triés dans l'ordre
                           dans lequel ils doivent être affichées"
          schema:
            type: array
            items:
              $ref: '#/definitions/FormMessage'


  /TR/getDetailsVehicule.do:
    get:
      tags:
        - TR
      summary: "Récupérer les info temps réel d'un véhicule"
      description: "Retourne les info temps réel d'un véhicule à partir de son numéro. Les informations temps réel concernant un véhicule évoluent rapidement; cette méthode ne fonctionne que pour les véhicules urbains (bus et tramways); les méthodes TR ne fournissent pas le numéro des autocars périurbains."
      parameters:
        - name: "apiKey"
          in: "query"
          description: "numéro de la clé api"
          required: true
          type: "string"
        - name: num
          in: query
          description: numéro du véhicule
          required: true
          type: integer
      responses:
        '200':
          description: "Objet FormVehiculeTR contenant toutes les informations du véhicule."
          schema:
            $ref: '#/definitions/FormVehiculeTR'

  '/Affluence/get.do':
    get:
      tags:
        - 'TR'
      summary: "Récupérer la prévision d'affluence (pas le temps réel)"
      description: "Dans TR il y a les informations d'affluence temps réel par arrêt ou par véhicule. Ici, c'est la prévision d'affluence pour une journée complète"
      parameters:
        - name: "apiKey"
          in: "query"
          description: "numéro de la clé api"
          required: true
          type: "string"
        - name: idArret
          in: query
          description: "identifiant de l'arrêt"
          required: true
          type: string
        - name: date
          in: query
          description: "date du jour voulu au format YYYY-MM-DD"
          required: true
          type: string
        - name: idLigne
          in: query
          description: "identifiant de la ligne (issu de l'objet FormVariante)"
          required: true
          type: integer
        - name: sensAller
          in: query
          description: "sens des variantes (issu de l'objet FormVariante)"
          required: true
          type: boolean
      responses:
        '200':
          description: "Tableau d'objets FormPrevisionAffluence. Liste de l'affluence par 1/4 d'heure de la journée."
          schema:
            type: array
            items:
              $ref: '#/definitions/FormPrevisionAffluence'
definitions:
  FormTarif:
    type: object
    properties:
      type:
        type: integer
        description: >-
          Type de titre de transport. Vaut 0 pour un titre au voyage, 1 pour un abonnement mensuel et 2 pour
          un abonnement annuel.
      libelle:
        type: string
        description: Nom commercial du titre de transport.
      description:
        type: string
        description: Description complète et conditions d'utilisation.
      pointsDeVente:
        type: string
        description: Points de vente où les clients peuvent se procurer ce titre de transport.
      tarif:
        type: number
        description: Prix TTC en euros.

  FormLigne:
    title: FormLigne > nouveauté 1.2
    type: object
    properties:
      id:
        type: string
        description: Identifiant de la ligne. Ne doit pas être affiché à l'utilisateur final. Certaines méthodes de l'API reçoivent en paramètre un identifiant de ligne.
      numLignePublic:
        type: string
        description: Numéro de ligne, affichable à l'utilisateur. Par exemple "1".
      libellePublic:
        type: string
        description: Description de la ligne, affichable à l'utilisateur. Par exemple "Hauts-du-Chazal &lt;&gt; Chalezeule".
      modeTransport:
        type: integer
        description: >
          type de véhicule
          
          - 0: "bus"
          
          - 1: "tramway"
        enum: [ 0,1 ]

      couleurFond:
        type: string
        description: Couleur d'arrière-plan caractéristique de la ligne (utilisée sur tous les documents et affichages dynamiques). Format HTML, sans le # initial. Par exemple: "00A5C2".
      couleurTexte:
        type: string
        description: Couleur de texte caractéristique de la ligne (utilisée sur tous les documents et affichages dynamiques). En général blanc ou noir. Format HTML, sans le # initial. Par exemple: "FFFFFF".
      variantes:
        type: array
        items:
          $ref: '#/definitions/FormVariante'
        description: "Chaque ligne est composée de plusieurs variantes. La plupart des lignes en contiennent deux: une pour chaque sens de circulation. Toutefois, certaines lignes peuvent en contenir plus, lorsqu'un ou plusieurs arrêts sont desservis seulement à certaines heures de la journée. Attention, si vous avez obtenu cet objet en réponse à la requête DR/getVariantesDesservantArret, seules les variantes de lignes desservant l'arrêt demandé sont présentes dans la liste."
      periurbain:
        type: boolean
        description: "(Ajouté le 08/08/2017) Indique s'il s'agit d'une ligne périurbaine. Les lignes périurbaines relient les villages situés dans le Grand Besançon aux Pôles d'Echange Intermodaux (PEI)."
      scolaire:
        type: boolean
        description: "(Ajouté le 26/06/2018) Indique s'il s'agit d'une ligne conçue spécialement pour les transports scolaires (collèges et lycées)."
      typologie:
        title: nouveauté 1.2
        type: integer
        enum: [ 10,20,30,40,50,60,70 ]
        description: >
          Permet de classer les lignes selon leur typologie. Le numéro permet également de les trier dans un ordre d'importance
          
          - 10 "Tramway (T1 / T2)"
          
          - 20 "LIANES (L3 à L6)"
          - 30 "Lignes urbaines (7 à 12 + Ginko Citadelle + PLAN.B)"
          
          - 40 "Lignes complémentaires (20 à 24)
          
          - 50 "Lignes périurbaines (51 à 87 + Ginko Osselle Plage + Ginko Piscine + Ginko Chailluz)"
          
          - 60 "Lignes scolaires (Diabolo)"
          
          - 70 "Services à la demande (Ginko Proxi, Ginko Proxi TGV, Ginko Hôpital, Ginko Cliniques, Ginko Gare)"
          
          - 80 "Autre"

  FormVariante:
    type: object
    properties:
      id:
        type: string
        description: "Identifiant de la variante dans la ligne. Ne doit pas être affiché à l'utilisateur final. A lui seul, cet identifiant ne signifie rien: il doit être associé à un identifiant de ligne. Certaines méthodes de l'API reçoivent en paramètre un identifiant de ligne et un identifiant de variante."
      sensAller:
        type: boolean
        description: "Indique le sens de circulation des véhicules qui suivent cette variante. Par convention, pour les lignes qui traversent Besançon de part en part, le sens Aller est utilisé en direction de l'Est, et le sens Retour en direction de l'Ouest. Vous aurez rarement besoin de cette information.
        true: variante en sens Aller
        false: variante en sens Retour"
      destination:
        type: string
        description: "Destination de la variante, affichable à l'utilisateur. Correspond en général au nom du terminus d'arrivée de la variante. Par exemple 'Chalezeule'"
      precisionDestination:
        type: string
        description: "Précisions sur l'itinéraire emprunté pour rejoindre la destination. La plupart du temps, ce champ est une chaine vide. Il est utilisé pour certaines variantes qui effectuent un crochet dans leur itinéraire pour desservir un point d'attraction particulier à certaines heures de la journée. Par exemple 'Par Piscine/Patinoire'"

  FormArret:
    type: object
    properties:
      id:
        type: string
        description: "Identifiant de l'arrêt. Chaque arrêt a un identifiant unique. Vous aurez rarement besoin de cet identifiant; en général, les méthodes de l'API reçoivent le nom de l'arrêt en paramètre."
      nom:
        type: string
        description: "Nom de l'arrêt, tel qu'il doit être affiché à l'utilisateur. Plusieurs arrêts peuvent avoir le même nom (par exemple, deux arrêts situés de part et d'autre de la route)."
      latitude:
        type: number
        format: float
        description: "Latitude de l'arrêt (en degrés décimaux). Si cette valeur vaut 0, c'est que les coordonnées GPS de l'arrêt sont inconnues (très rare)."
      longitude:
        type: number
        format: float
        description: "Longitude de l'arrêt (en degrés décimaux). Si cette valeur vaut 0, c'est que les coordonnées GPS de l'arrêt sont inconnues (très rare)."
      accessiblite:
        type: integer
        description: "(Ajouté le 24/05/2018) Indique si l'arrêt est accessible aux personnes à mobilité réduite et aménagé pour permettre leur embarquement/débarquement dans les véhicules (bande d'éveil de vigilance, quai réhaussé). 0: Aucune information n'est disponible. 1: Arrêt accessible. 2: Arrêt difficilement accessible ou non accessible. Attention, même si l'arrêt est accessible, tous les véhicules qui le desservent ne le sont pas forcément (reportez-vous au champ accessibiliteVehicule de l'objet FormTempsAttente)."

  FormVehicule:
    type: object
    properties:
      num:
        type: string
        description: "Identifiant du véhicule, pour rappel. Ce numéro est celui qui est inscrit à l'extérieur des véhicules, à l'avant et à l'arrière. Il est de type chaine car il est possible, à l'avenir, que certains véhicules soient numérotés avec des lettres ou d'autres caractères."
      affichageDynamique:
        type: boolean
        description: "Indique si le véhicule est équipé d'afficheurs dynamiques annonçant les prochaines stations desservies. Attention, cette information ne tient pas compte d'un éventuel dysfonctionnement de l'équipement."
      annoncesSonores:
        type: boolean
        description: "Indique si le véhicule est équipé d'un dispositif d'annonces sonores des prochaines stations desservies. Attention, cette information ne tient pas compte d'un éventuel dysfonctionnement de l'équipement."
      climatisation:
        type: boolean
        description: "Indique si le véhicule est climatisé. Attention, cette information ne tient pas compte d'un éventuel dysfonctionnement de l'équipement."
      prisesUSB:
        type: boolean
        description: "Indique si le véhicule est équipé de prises USB accessibles aux voyageurs et permettant le rechargement d'appareils (smartphones par exemple). Attention, cette information ne tient pas compte d'un éventuel dysfonctionnement de l'équipement."
      accessiblite:
        type: integer
        description: "Indique si le véhicule est accessible aux personnes à mobilité réduite. 0: Aucune information n'est disponible. 1: Véhicule accessible. 2: Véhicule non accessible. Attention, cette information ne tient pas compte d'un éventuel dysfonctionnement de l'équipement (rampe d'accès)."
      energie:
        type: integer
        description: "Indique le type d'énergie qu'utilise le véhicule : 0 pas d'info, 1 Véhicule au gazole, 2 Véhicule au gaz naturel, 3 Véhicule hybride (électrique + gaz), 4 Véhicule électrique. Attention, cette information ne tient pas compte d'un éventuel dysfonctionnement de l'équipement."
      typeVehicule:
        type: string
        description: "Indique le type de véhicule (Bus articulé, Bus moyenne capacité, Bus Standard, Tramway 22 mètres, Tramway 33 mètres)"

  FormVehiculeTR:
    type: object
    properties:
      num:
        type: string
        description: Identifiant du véhicule, inscrit à l'extérieur des véhicules, à l'avant et à l'arrière. Il est possible que certains véhicules soient numérotés avec des lettres ou d'autres caractères.
      affluence:
        type: integer
        enum: [ -1,-2,0,1,2 ]
        description: >
          Indique l'affluence en temps réel pour ce véhicule, de -1 à 2.
          
          - -1: "Indisponible - Il est actuellement impossible de connaître l’affluence à bord de ce véhicule"
          
          - -2: "Vous n'avez pas les droits d'accès à l'affluence dans les véhicules"
          
          - 0: "Faible - il y a peu de voyageurs à bord"
          
          - 1: "Modérée - il y a déjà quelques voyageurs à bord, il reste sûrement quelques places assises"
          
          - 2: "Forte - il y a déjà beaucoup de voyageurs à bord, il n’y a probablement plus de places assises"
      texteAffluence:
        type: string
        description: "Texte qui décrit l'affluence pour les usagers. Exemple, si affluence vaut 0, le texte pourrait être 'Il y a peu de voyageurs à bord de ce véhicule actuellement'"
      nbPassagersABord:
        type: integer
        description: "Indique le nombre de passagers à bord du véhicule. -1 si l'information n'est pas disponible. -2 si vous n'avez pas les droits nécessaires."
      tauxDeCharge:
        type: integer
        description: "Taux en % qui indique comment le véhicule est rempli en fonction de sa capacité (100% = bus complet). -1 si l'information n'est pas disponible. -2 si vous n'avez pas les droits nécessaires."
      position:
        type: string
        description: "Texte qui indique la position du véhicule. Ex:'Le véhicule est actuellement entre les stations Voirin et Gibelotte sur la ligne L3 Direction Pôle Temis par Gare Viotte et Campus' ou 'Le véhicule n'est actuellement pas localisable avec précision' ou vide '' si vous n'avez pas les droits."

  FormTempsAttente:
    title: FormTempsAttente > nouveauté v1.2
    type: object
    properties:
      idArret:
        type: string
        description: "Identifiant de l'arrêt. Normalement, si vous obtenez un objet FormTempsAttente, vous connaissez déjà le nom de l'arrêt à afficher à l'utilisateur. Cet identifiant peut en revanche vous servir pour obtenir d'autres informations sur l'arrêt (méthode DR/getDetailsArret)."
      latitude:
        type: number
        format: float
        description: "(Ajouté le 01/06/2017) Latitude de l'arrêt (en degrés décimaux). Si cette valeur vaut 0, c'est que les coordonnées GPS de l'arrêt sont inconnues (très rare)."
      longitude:
        type: number
        format: float
        description: "(Ajouté le 01/06/2017) Longitude de l'arrêt (en degrés décimaux). Si cette valeur vaut 0, c'est que les coordonnées GPS de l'arrêt sont inconnues (très rare)."
      idLigne:
        type: string
        description: "Identifiant de la ligne. Ne doit pas être affichée à l'utilisateur. Consultez la documentation de l'objet FormLigne pour plus d'infos."
      numLignePublic:
        type: string
        description: "Consultez la documentation de l'objet FormLigne pour plus d'infos."
      couleurFond:
        type: string
        description: "Consultez la documentation de l'objet FormLigne pour plus d'infos."
      couleurTexte:
        type: string
        description: "Consultez la documentation de l'objet FormLigne pour plus d'infos."
      sensAller:
        type: boolean
        description: "Indique si la ligne circule en sens Aller (true) ou Retour (false)."
      destination:
        type: string
        description: "Destination du bus ou tram, à afficher à l'utilisateur. Cette destination ne correspond pas forcément à celle d'une variante de la ligne (certains voyages ne circulent pas jusqu'au terminus habituel de la variante)."
      precisionDestination:
        type: string
        description: "Précisions sur l'itinéraire emprunté pour rejoindre la destination. La plupart du temps, ce champ est une chaine vide. Il est utilisé pour certains voyages qui effectuent un crochet dans leur itinéraire pour desservir un point d'attraction particulier à certaines heures de la journée. Par exemple 'Par Clinique St Vincent'."
      temps:
        title: nouveauté v1.2
        type: string
        description: "Temps d'attente à afficher à l'utilisateur (exemples: '3 min'). Parfois,
         cette information est remplacée par l'annonce d'une perturbation ('Travaux', 'Manifestation'...)<br/>
         <code>Nouveauté v1.2 : </code> parfois ce temps peux être une heure d'arrivé, ex: '17h05'"
      tempsHTML:
        title: nouveauté v1.2
        type: string
        description: "Temps d'attente à afficher à l'utilisateur comme pour le champs 'temps',
                 avec des balises span pour aider à la mise en forme. 
                 Les différents éléments sont dans des balises <code>&lt;span&gt;</code> avec des class css qui permettront 
                 d'agir sur le style. Voici une liste exhaustive de tous les styles existant : <br/>
                 <code>
                  exemple 1 : &lt;span class='gk-temps'&gt;2&lt;/span&gt; &lt;span class='gk-mn'&gt;min&lt;/span&gt;<br/>
                  exemple 2 : &lt;span class='gk-horaire'&gt;17:22&lt;/span&gt;<br/>
                  exemple 3 : &lt;span class='gk-mot'&gt;D&eacute;viation&lt;/span&gt;<br/>
                  exemple 4 : &lt;span class='gk-mot'&gt;Bus complet&lt;/span&gt;<br/>
                 </code>"
      tempsEnSeconde:
        title: nouveauté v1.2
        type: integer
        description: "temps d'attente en seconde. Ne doit pas être affiché directement, mais peut être utilisé pour faire des règles (des if)"
      typeDeTemps:
        title: nouveauté v1.2
        type: integer
        enum: [ 0, 1, 2 ]
        description: "Indique le type de données présentes dans 'temps' ou 'tempsHTML' <br/>
         <code>0</code> : temps avant l'arrivé du véhicule ex '2 mn' <br/>
         <code>1</code> : horaire d'arrivée ex '17:30' (généralement si le temps d'attente dépasse 59 mn on affiche un horaire)<br/>
         <code>2</code> : texte (1 ou  2 mots court)s de remplacement ex 'travaux' ou 'déviation' ou 'bus complet'"
      alternance:
        title: nouveauté v1.2
        type: boolean
        description: "Optionnel, indique si le texte 'tempsHTML' est à alterner avec le champs tempsHTMLEnAlternance toutes les 3 secondes.
         Pour l'instant il n'y a qu'un cas d'utilisation, dans tempsHTML il y aura 'bus complet' et dans tempsHTMLEnAlternance '5 mn' (avec les balises span en plus)"
      tempsHTMLEnAlternance:
        title: nouveauté v1.2
        type: string
        description: "Optionnel, cf. description 'alternance', Ex:<br/> 
        <code> &lt;span class='gk-temps'&gt;2&lt;/span&gt; &lt;span class='gk-mn'&gt;min&lt;/span&gt;</code>"
      fiable:
        type: boolean
        description: "Indique si le temps d'attente est calculé à l'aide d'informations précises sur la localisation du véhicule (true) ou s'il s'agit d'une estimation basée sur les horaires théoriques (false). Lorsque cette information vaut false, vous devez remplacer le temps d'attente par la mention 'Non localisé', ou bien préciser très clairement que le temps indiqué est théorique."
      numVehicule:
        type: string
        description: "Numéro du bus ou de la rame. Cette information n'est pas destinée à être affichée à l'utilisateur, mais elle peut vous servir pour récupérer des informations d'accessibilité (annonces vocales, accessibilité PMR...) en utilisant la méthode DR/getInfosVehicule."
      accessibiliteArret:
        type: integer
        enum: [ 0, 1, 2 ]
        description: "(Ajouté le 24/05/2018) Indique si l'arrêt est accessible aux personnes à mobilité réduite et aménagé pour permettre leur embarquement/débarquement dans les véhicules (bande d'éveil de vigilance, quai réhaussé). 0: Aucune information n'est disponible. 1: Arrêt accessible. 2: Arrêt difficilement accessible ou non accessible."
      accessibiliteVehicule:
        type: integer
        enum: [ 0, 1, 2 ]
        description: "(Ajouté le 24/05/2018) Indique si le véhicule est accessible aux personnes à mobilité réduite. 0: Aucune information n'est disponible. 1: Véhicule accessible. 2: Véhicule non accessible. Attention, cette information ne tient pas compte d'un éventuel dysfonctionnement de l'équipement (rampe d'accès)."
      affluence:
        type: integer
        enum: [ -1, 0, 1, 2 ]
        description: "Indique la prévision d'affluence en temps réel à l'arrêt pour ce véhicule de -1 à 2. 0 Faible - Lors de son passage à l'arrêt, il y aura peu de voyageurs à bord. 1 Modérée - Lors de son passage à l'arrêt, il y aura déjà quelques voyageurs à bord: il restera sûrement quelques places assises!. 2 Forte - Lors de son passage à l'arrêt, il y aura déjà beaucoup de voyageurs à bord: il n’y aura probablement plus de places assises. -1 :Indisponible - Il est actuellement impossible de prévoir l’affluence à bord de ce véhicule. -2 :Vous n'avez pas les droits aux informations d'affluences. Contactez-nous"
      texteAffluence:
        type: string
        description: "Texte qui décrit l'affluence pour les usagers. Exemple, si affluence vaut 0, le texte pourrait être : 'Lors de son passage à votre arrêt, il y aura peu de voyageurs à bord: une place assise vous attend!'"
      aideDecisionAffluence:
        type: string
        description: "Texte qui peut être vide ou qui peut aider l'usager à prendre une decision en fonction de l'affluence. Exemple si la charge du véhicule est forte, celle du suivant est modérée, le message pourrait être 'Vous avez un peu de temps? Le bus suivant est prévu dans 6 minutes et l’affluence sera modérée.'"
      tauxDeCharge:
        type: integer
        description: "Taux en % qui indique comment le véhicule sera rempli en fonction de sa capacité (100% = bus complet) -1 si l'information n'est pas disponible. -2 :Vous n'avez pas les droits aux informations d'affluences. Contactez-nous."
      idInfoTrafic:
        title: nouveauté v1.2
        type: integer
        description: "0 s'il n'y a pas d'infoTrafic liée au temps d'attente, id de la FormInfoTrafic. Cela peut permettre d'afficher un contexte quand le temps est remplacé par du texte comme 'déviation' ou 'travaux'"
      modeTransport:
        title: nouveauté v1.2
        type: integer
        description: >
          type de véhicule
          
          - 0: "bus"
          
          - 1: "tramway"
        enum: [ 0,1 ]


  FormInfoTrafic:
    title: FormInfoTrafic > deprecated v1.2
    type: object
    properties:
      id:
        type: integer
        description: Identifiant numérique de l'information. Ce numéro ne doit pas être affiché au public.
      titre:
        type: string
        description: Titre de l'information. Jamais vide.
      texte:
        type: string
        description: Contenu de l'information en version simplifiée. Jamais vide.
      texteHTML:
        type: string
        description: Contenu de l'information en version enrichie. Jamais vide. Si vous souhaitez afficher l'information sur un support web, utilisez de préférence ce champ.
      url:
        type: string
        description: URL d'une page du site ginko.voyage sur laquelle des informations complémentaires sont disponibles. Peut être une chaîne vide.
      tempsReel:
        type: boolean
        description: Indique s'il s'agit d'une information temps réel ou d'une information anticipée.
      alerte:
        type: boolean
        description: "Indique si cette information revêt une importance capitale. Vous pouvez par exemple faire ressortir davantage cette info, ou l'afficher en priorité si l'espace disponible sur le support de diffusion est limité. Il ne peut pas y avoir plusieurs alertes en même temps."
      push:
        type: boolean
        description: "(Ajouté le 29/03/2018) Indique s'il est recommandé de notifier les utilisateurs finaux au sujet de cette information. Il est recommandé de notifier les utilisateurs seulement si cette propriété vaut true et si l'utilisateur a indiqué être intéressé par les infos-trafic de la/des ligne(s) concernée(s) par cette information."
      lignes:
        type: array
        items:
          $ref: '#/definitions/FormInfoLigne'
        description: >
          Tableau d'objets FormInfoLigne (décrit ci-dessous). Liste des lignes concernées par cette info-trafic, triée par ordre logique d'affichage. Cette liste n'est jamais vide, mais elle peut ne contenir qu'un seul élément.
  FormMessage:
    title: FormMessage > nouveauté v1.2
    type: object
    properties:
      id:
        type: integer
        description: Identifiant numérique de l'information. Ce numéro ne doit pas être affiché au public, il est unique.
      titre:
        type: string
        description: Titre de l'information. Peut contenir de l'HTML / CSS. Jamais vide.
      texte:
        type: string
        description: Contenu de l'information pour un support Web, avec de HTML / CSS. Jamais vide.
      url:
        type: string
        description: URL d'une page du site ginko.voyage sur laquelle des informations complémentaires sont disponibles. On pourra voir sur cette page tous les messages d'une même campagne (cf. idCampagne) Peut être une chaîne vide.
      etat:
        type: integer
        enum: [ 1 ,2 ,4 , 5 , 6 ]
        description: >
          Etat de la ligne en terme d'info trafic
          
          - 1 : Aucune perturbation
          
          - 2 : Information concernant la (ou les) ligne(s) (nouveauté, évolution)
          
          - 4 : Une perturbation est prévue dans le futur
          
          - 5 : Une perturbation est en cours
          
          - 6 : La circulation de la (ou des) ligne(s) est interrompue (totalement)
      idEvenement:
        type: integer
        description: Identifiant de l'évènement qui regroupe plusieurs messages. Peut être utiliser pour afficher sur une même page, tous les messages liés par un même évenement.
      lignes:
        type: array
        items:
          type: string
        description: "Tableau de numéro de ligne. Liste des lignes concernées par cette info-trafic, triée par ordre logique d'affichage. Cette liste n'est jamais vide, mais elle peut ne contenir qu'un seul élément."
      arrets:
        type: array
        items:
          type: string
        description: "Tableau d'id arrêt. Si le tableau est vide le message est à diffuser sur toutes les lignes de la liste 'lignes', sinon l'information n'est à diffuser que sur les arrets dont l'id  est dans cette liste. (Ne concerne pas les supports WEB)"
      supports:
        description: "listes des supports de diffusion du message. Sans droit supplémentaire, seuls les messages de type 'Web' apparaissent (1=> borne info voyageur | 2=> écran embarqué | 3=> web | 4=> notification | 5=> mail)"
        type: array
        items:
          type: integer


  FormInfoLigne:
    title: FormInfoLigne > nouveauté v1.2
    type: object
    properties:
      idLigne:
        type: string
        description: Identifiant de la ligne. Ne doit pas être affichée à l'utilisateur. Consultez la documentation de l'objet FormLigne pour plus d'infos.
      numLignePublic:
        type: string
        description: Consultez la documentation de l'objet FormLigne pour plus d'infos.
      couleurFond:
        type: string
        description: Consultez la documentation de l'objet FormLigne pour plus d'infos.
      couleurTexte:
        type: string
        description: Consultez la documentation de l'objet FormLigne pour plus d'infos.
      etat:
        title: nouveauté v1.2
        type: integer
        enum: [ 0,1,2,3,4,5,6 ]
        description: >
          Etat de la ligne en terme d'info trafic
          
          - 0 "Pas de couleur (pas de picto) - pas d'info sur l'état. Exemple pour les lignes TAD"
          
          - 1 "Vert (picto check) - La ligne fonctionne normalement (aucune perturbation en cours ni prévue)"
          
          - 2 "Bleu (picto info)  - Il y a une information concernant la ligne (nouveauté, évolution)"
          
          - 3 "Gris (picto croix) - La ligne ne fonctionne pas en ce moment, selon sa période de fonctionnement"
          
          - 4 "Gris (picto attention) - Une perturbation est prévue dans le futur"
          
          - 5 "Orange (picto attention) - Une perturbation est en cours"
          
          - 6 "Rouge (picto croix) - La circulation de la ligne est interrompue (totalement)"

  FormPrevisionAffluence:
    type: object
    properties:
      heureDeDebut:
        type: string
        description: Heure de début de mesure de l'affluence
      heureDeFin:
        type: string
        description: Heure de fin de mesure de l'affluence
      affluence:
        type: integer
        enum:
          - 0
          - 1
          - 2
          - -1
        description: "Indique l'affluence de ce créneau horaire, de -1 à 2.
          0 Faible - il y a peu de voyageurs à bord des véhicules
          1 Modérée -il y a déjà quelques voyageurs à bord des véhicules:
            il reste sûrement quelques places assises!
          2 Forte - il y a déjà beaucoup de voyageurs à bord des véhicules:
            il n’y a probablement plus de places assises.
          -1 :Indisponible - Il est impossible de connaitre l’affluence pour ce créneau"
      texteAffluence:
        type: string
        description: "Texte qui décrit l'affluence pour les usagers. Exemple, si affluence vaut 0, le texte pourrait être :
                       'Il y a peu de voyageurs à bord des véhicules lors de ce créneau horaire'"
      nbPassagersABord:
        type: integer
        description: "Indique une moyenne du nombre de passagers à bord des véhicules.
          -1 si l'information n'est pas disponible.
          -2 :Vous n'avez pas les droits aux informations d'affluences. Contactez-nous"
      tauxDeCharge:
        type: integer
        description: "Taux en % qui indique comment les véhicules sont remplis en fonction de leur capacité.
          -1 si l'information n'est pas disponible.
          -2 :Vous n'avez pas les droits aux informations d'affluences. Contactez-nous"
